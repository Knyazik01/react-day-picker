"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7055],{4680:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>a});var s=d(651),i=d(2844);const t={sidebar_position:4},l="Selection Modes",c={id:"using-daypicker/selection-modes",title:"Selection Modes",description:"DayPicker comes with some predefined rules for selecting days:",source:"@site/docs/using-daypicker/selection-modes.mdx",sourceDirName:"using-daypicker",slug:"/using-daypicker/selection-modes",permalink:"/next/using-daypicker/selection-modes",draft:!1,unlisted:!1,editUrl:"https://github.com/gpbl/react-day-picker/tree/main/website/docs/using-daypicker/selection-modes.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Months Navigation",permalink:"/next/using-daypicker/navigation"},next:{title:"Localization",permalink:"/next/using-daypicker/localization"}},r={},a=[{value:"Single Mode",id:"single-mode",level:2},{value:"Single Mode Props",id:"single-mode-props",level:3},{value:"Required Selection",id:"required-selection",level:3},{value:"Multiple Mode",id:"multiple-mode",level:2},{value:"Multiple Mode Props",id:"multiple-mode-props",level:3},{value:"Min and Max Dates",id:"min-and-max-dates",level:3},{value:"Range Mode",id:"range-mode",level:2},{value:"Min and Max Dates",id:"min-and-max-dates-1",level:3},{value:"Shift Key",id:"shift-key",level:3},{value:"Disabling Dates",id:"disabling-dates",level:2},{value:"Custom Mode",id:"custom-mode",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{BrowserWindow:d,Examples:t}=n;return d||x("BrowserWindow",!0),t||x("Examples",!1),t.ModifiersDisabled||x("Examples.ModifiersDisabled",!0),t.Multiple||x("Examples.Multiple",!0),t.MultipleMinMax||x("Examples.MultipleMinMax",!0),t.Range||x("Examples.Range",!0),t.RangeMinMax||x("Examples.RangeMinMax",!0),t.RangeShiftKey||x("Examples.RangeShiftKey",!0),t.Single||x("Examples.Single",!0),t.SingleRequired||x("Examples.SingleRequired",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"selection-modes",children:"Selection Modes"}),"\n",(0,s.jsx)(n.p,{children:"DayPicker comes with some predefined rules for selecting days:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#single-mode",children:"Single mode"}),": only one day can be selected."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#multiple-mode",children:"Multiple mode"}),": select multiple days."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#range-mode",children:"Range mode"}),": select a continuous range of days."]}),"\n",(0,s.jsxs)(n.li,{children:["Create ",(0,s.jsx)(n.a,{href:"/next/advanced-guides/custom-selections",children:"custom selection"})," rules for more complex scenarios."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To make days selectable, set the ",(0,s.jsx)(n.code,{children:"mode"})," prop. Disallow the selection of specific days by using the ",(0,s.jsx)(n.code,{children:"disabled"})," prop."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"mode"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:'"single"'})," | ",(0,s.jsx)(n.code,{children:'"multiple"'})," | ",(0,s.jsx)(n.code,{children:'"range"'})," | ",(0,s.jsx)(n.code,{children:'"none"'})]}),(0,s.jsxs)(n.td,{children:["Set a selection mode. Default is ",(0,s.jsx)(n.code,{children:'"none"'}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"disabled"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.a,{href:"/next/api/type-aliases/Matcher",children:(0,s.jsx)(n.code,{children:"Matcher"})})," | ",(0,s.jsx)(n.code,{children:"Matcher[]"})]}),(0,s.jsx)(n.td,{children:"Disabled days that cannot be selected."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"single-mode",children:"Single Mode"}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.code,{children:"mode"})," prop is set to ",(0,s.jsx)(n.code,{children:'"single"'}),", only one day can be selected at a time."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<DayPicker mode="single" />\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.Single,{})}),"\n",(0,s.jsx)(n.h3,{id:"single-mode-props",children:"Single Mode Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selected"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Date | undefined"})}),(0,s.jsx)(n.td,{children:"The selected date."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onSelect"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"../api/type-aliases/SelectSingleEventHandler.md",children:(0,s.jsx)(n.code,{children:"SelectSingleEventHandler"})})}),(0,s.jsx)(n.td,{children:"Event callback when a date is selected."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"required"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:"Make the selection required."})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["The following code snippet will render a date picker with a single selected date. When a day is clicked, the ",(0,s.jsx)(n.code,{children:"selectedDate"})," state is updated."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useState } from "react";\n\nimport { DayPicker } from "react-day-picker";\n\nexport function App() {\n  const initiallySelectedDate = new Date();\n  const [selectedDate, setSelectedDate] = useState(initiallySelectedDate);\n  return (\n    <DayPicker\n      mode="single"\n      selected={selectedDate}\n      onSelect={setSelectedDate}\n    />\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"required-selection",children:"Required Selection"}),"\n",(0,s.jsxs)(n.p,{children:["By setting the ",(0,s.jsx)(n.code,{children:"required"})," prop, DayPicker won't allow the user to unselect the selected date."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<DayPicker mode="single" required />\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.SingleRequired,{})}),"\n",(0,s.jsx)(n.h2,{id:"multiple-mode",children:"Multiple Mode"}),"\n",(0,s.jsxs)(n.p,{children:["By setting the ",(0,s.jsx)(n.code,{children:"mode"})," prop to ",(0,s.jsx)(n.code,{children:'"multiple"'}),", DayPicker allows selecting multiple days."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<DayPicker mode="multiple" />\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.Multiple,{})}),"\n",(0,s.jsx)(n.h3,{id:"multiple-mode-props",children:"Multiple Mode Props"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selected"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Date[] | undefined"})}),(0,s.jsx)(n.td,{children:"The selected dates."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onSelect"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"../api/type-aliases/SelectMultipleEventHandler.md",children:(0,s.jsx)(n.code,{children:"SelectMultipleEventHandler"})})}),(0,s.jsx)(n.td,{children:"Event callback when a date is selected."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"min"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The minimum dates that can be selected."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The maximum dates that can be selected."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"min-and-max-dates",children:"Min and Max Dates"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"min"})," and ",(0,s.jsx)(n.code,{children:"max"})," props to limit the number of selectable dates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { addDays } from "date-fns";\nimport { DayPicker } from "react-day-picker";\n\nexport function MultipleMinMax() {\n  const defaultSelected = [new Date(), addDays(new Date(), 1)];\n  return (\n    <DayPicker\n      defaultSelected={defaultSelected}\n      mode="multiple"\n      min={2}\n      max={5}\n    />\n  );\n}\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.MultipleMinMax,{})}),"\n",(0,s.jsx)(n.h2,{id:"range-mode",children:"Range Mode"}),"\n",(0,s.jsxs)(n.p,{children:["When the ",(0,s.jsx)(n.code,{children:"mode"})," prop is set to ",(0,s.jsx)(n.code,{children:'"range"'}),", DayPicker allows selecting a continuous range of dates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<DayPicker mode="range" />\n'})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Prop Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"selected"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/next/api/type-aliases/DateRange",children:(0,s.jsx)(n.code,{children:"DateRange"})})}),(0,s.jsx)(n.td,{children:"The selected range."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"onSelect"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"../api/type-aliases/SelectRangeEventHandler.md",children:(0,s.jsx)(n.code,{children:"SelectRangeEventHandler"})})}),(0,s.jsx)(n.td,{children:"Event callback when a date is selected."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"min"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The minimum dates that can be selected."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"The maximum dates that can be selected."})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useState } from "react";\n\nimport { addDays } from "date-fns";\nimport { DateRange, DayPicker } from "react-day-picker";\n\nexport function Range() {\n  const initialRange: DateRange = {\n    from: new Date(),\n    to: addDays(new Date(), 4)\n  };\n\n  const [range, setRange] = useState<DateRange | undefined>(initialRange);\n\n  return <DayPicker mode="range" selected={range} onSelect={setRange} />;\n}\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.Range,{})}),"\n",(0,s.jsx)(n.h3,{id:"min-and-max-dates-1",children:"Min and Max Dates"}),"\n",(0,s.jsxs)(n.p,{children:["Also in range mode, you can set the ",(0,s.jsx)(n.code,{children:"min"})," and ",(0,s.jsx)(n.code,{children:"max"})," props to limit the number of selectable dates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useState } from "react";\n\nimport { DateRange, DayPicker } from "react-day-picker";\n\nexport function RangeMinMax() {\n  const [range, setRange] = useState<DateRange | undefined>();\n\n  return (\n    <DayPicker\n      defaultMonth={new Date(2022, 8)}\n      mode="range"\n      min={3}\n      max={6}\n      selected={range}\n      onSelect={setRange}\n    />\n  );\n}\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.RangeMinMax,{})}),"\n",(0,s.jsx)(n.h3,{id:"shift-key",children:"Shift Key"}),"\n",(0,s.jsxs)(n.p,{children:["The following DayPicker requires the ",(0,s.jsx)("kbd",{children:"Shift"})," key to select a range of dates. See ",(0,s.jsx)(n.a,{href:"https://github.com/gpbl/react-day-picker/blob/website/examples/RangeShiftKey.tsx",children:"examples/RangeShiftKey.tsx"})," for the full source code."]}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.RangeShiftKey,{})}),"\n",(0,s.jsx)(n.h2,{id:"disabling-dates",children:"Disabling Dates"}),"\n",(0,s.jsxs)(n.p,{children:["To disable specific days, use the ",(0,s.jsx)(n.code,{children:"disabled"})," prop. The prop accepts a ",(0,s.jsx)(n.a,{href:"/next/api/type-aliases/Matcher",children:(0,s.jsx)(n.code,{children:"Matcher"})})," or an array of matchers that can be used to make some days not selectable."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'<DayPicker\n  mode="single"\n  disabled={{ daysOfWeek: [0, 6] }} // Disable Sundays and Saturdays\n/>\n'})}),"\n",(0,s.jsx)(d,{children:(0,s.jsx)(t.ModifiersDisabled,{})}),"\n",(0,s.jsx)(n.h2,{id:"custom-mode",children:"Custom Mode"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["See the ",(0,s.jsx)(n.a,{href:"/next/advanced-guides/custom-selections",children:"Custom Selections"})," guide to create custom selection modes."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},2844:(e,n,d)=>{d.d(n,{Z:()=>c,a:()=>l});var s=d(2379);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);