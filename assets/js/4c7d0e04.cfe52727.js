"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[292],{5500:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>s,toc:()=>r});var a=t(651),i=t(1725);const d={sidebar_position:1},l="Input Fields",s={id:"advanced-guides/input-fields",title:"Input Fields",description:"Implementing DayPicker together with an input field requires complex interaction and design considerations, which we do not bake into the DayPicker component.",source:"@site/docs/advanced-guides/input-fields.mdx",sourceDirName:"advanced-guides",slug:"/advanced-guides/input-fields",permalink:"/advanced-guides/input-fields",draft:!1,unlisted:!1,editUrl:"https://github.com/gpbl/react-day-picker/tree/main/website/docs/advanced-guides/input-fields.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Accessibility",permalink:"/using-daypicker/accessibility"},next:{title:"Custom Selections",permalink:"/advanced-guides/custom-selections"}},o={},r=[{value:"Examples",id:"examples",level:2},{value:"Input with Inline Calendar",id:"input-with-inline-calendar",level:3},{value:"Input with Date Picker Dialog",id:"input-with-date-picker-dialog",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components},{BrowserWindow:t,Examples:d}=n;return t||u("BrowserWindow",!0),d||u("Examples",!1),d.Dialog||u("Examples.Dialog",!0),d.Input||u("Examples.Input",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"input-fields",children:"Input Fields"}),"\n",(0,a.jsx)(n.p,{children:"Implementing DayPicker together with an input field requires complex interaction and design considerations, which we do not bake into the DayPicker component."}),"\n",(0,a.jsx)(n.p,{children:"As a developer, you will need to handle the integration of DayPicker with an input field in your application. This involves managing user interactions, syncing the selected date between the calendar and the input field, and ensuring accessibility and usability."}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"#examples",children:"examples below"})," as a starting point for implementing a date picker with input fields."]}),"\n",(0,a.jsx)(n.admonition,{title:"Native Date Pickers",type:"info",children:(0,a.jsxs)(n.p,{children:["Browsers implement ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date",children:"native date pickers"})," that provides a simple, built-in method for users to select a date.\nHowever, the appearance and format of the date picker can vary between different browsers and may not offer the level of customization you require."]})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.p,{children:"These examples showcase different approaches for integrating DayPicker with input fields, such as using an inline calendar or a date picker dialog."}),"\n",(0,a.jsx)(n.h3,{id:"input-with-inline-calendar",children:"Input with Inline Calendar"}),"\n",(0,a.jsx)(n.p,{children:"In this example, the selected date is displayed in an input field, and the calendar is displayed below the input field. The selected date is updated when the user selects a date from the calendar."}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(d.Input,{})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import { useState } from "react";\n\nimport { format, isValid, parse } from "date-fns";\nimport { DayPicker } from "react-day-picker";\n\nexport function Input() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n  const [inputValue, setInputValue] = useState("");\n\n  const handleSelect = (date: Date | undefined) => {\n    if (!date) {\n      setInputValue("");\n      setSelectedDate(undefined);\n    } else {\n      setSelectedDate(date);\n      setInputValue(format(date, "MM/dd/yyyy"));\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const parsedDate = parse(e.target.value, "MM/dd/yyyy", new Date());\n    if (isValid(parsedDate)) {\n      setSelectedDate(parsedDate);\n    }\n    setInputValue(e.target.value);\n  };\n\n  return (\n    <div>\n      <label htmlFor="booking-input">\n        <strong>Selected Date: </strong>\n      </label>\n      <input\n        style={{ fontSize: "inherit" }}\n        id="booking-input"\n        type="text"\n        value={inputValue}\n        placeholder="MM/dd/yyyy"\n        onChange={handleInputChange}\n      />\n      <DayPicker\n        mode="single"\n        selected={selectedDate}\n        onSelect={handleSelect}\n        footer={\n          <p aria-live="assertive" aria-atomic="true">\n            {selectedDate !== undefined && (\n              <>Selected: {selectedDate.toDateString()}</>\n            )}\n          </p>\n        }\n      />\n    </div>\n  );\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"input-with-date-picker-dialog",children:"Input with Date Picker Dialog"}),"\n",(0,a.jsxs)(n.p,{children:["Implementing the date picker as a dialog requires careful consideration of accessibility. You can refer to the ",(0,a.jsx)(n.a,{href:"https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/examples/datepicker-dialog/",children:"W3C ARIA Authoring Practices"})," for guidance on implementing an accessible date picker dialog."]}),"\n",(0,a.jsxs)(n.p,{children:["In this example, we use the native HTML ",(0,a.jsx)(n.code,{children:"<dialog>"})," element, which provides a built-in way to create a modal dialog. The dialog is opened when the user clicks the calendar button, and the selected date is displayed in the input field."]}),"\n",(0,a.jsxs)(n.p,{children:["You can replace the native ",(0,a.jsx)(n.code,{children:"<dialog>"})," element with a custom dialog component or a modal library that fits your application's design and accessibility requirements."]}),"\n",(0,a.jsx)(t,{children:(0,a.jsx)(d.Dialog,{})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import { useEffect, useId, useRef, useState } from "react";\n\nimport { format, isValid, parse } from "date-fns";\nimport { DayPicker } from "react-day-picker";\n\nfunction Dialog() {\n  const dialogRef = useRef<HTMLDialogElement>(null);\n  const dialogId = useId();\n  const headerId = useId();\n\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n  const [inputValue, setInputValue] = useState("");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Function to toggle the dialog visibility\n  const toggleDialog = () => setIsDialogOpen(!isDialogOpen);\n\n  // Hook to handle the body scroll behavior and focus trapping\n  useEffect(() => {\n    const handleBodyScroll = (isOpen: boolean) => {\n      document.body.style.overflow = isOpen ? "hidden" : "";\n    };\n    if (!dialogRef.current) return;\n    if (isDialogOpen) {\n      handleBodyScroll(true);\n      dialogRef.current.showModal();\n    } else {\n      handleBodyScroll(false);\n      dialogRef.current.close();\n    }\n\n    return () => {\n      handleBodyScroll(false);\n    };\n  }, [isDialogOpen]);\n\n  const handleSelect = (date: Date) => {\n    if (!date) {\n      setInputValue("");\n      setSelectedDate(undefined);\n    } else {\n      setSelectedDate(date);\n      setInputValue(format(date, "MM/dd/yyyy"));\n    }\n    dialogRef.current?.close();\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const parsedDate = parse(e.target.value, "MM/dd/yyyy", new Date());\n    if (isValid(parsedDate)) {\n      setSelectedDate(parsedDate);\n    }\n    setInputValue(e.target.value);\n  };\n  return (\n    <div>\n      <label htmlFor="date-input">\n        <strong>Selected Date: </strong>\n      </label>\n      <input\n        style={{ fontSize: "inherit" }}\n        id="date-input"\n        type="text"\n        value={inputValue}\n        placeholder={"MM/dd/yyyy"}\n        onChange={handleInputChange}\n      />\n      <button\n        style={{ fontSize: "inherit" }}\n        onClick={toggleDialog}\n        aria-controls="dialog"\n        aria-haspopup="dialog"\n        aria-expanded={isDialogOpen}\n        aria-label="Open calendar to choose booking date"\n      >\n        \ud83d\udcc6\n      </button>\n      <p aria-live="assertive" aria-atomic="true">\n        {selectedDate !== undefined\n          ? selectedDate.toDateString()\n          : "Please type or pick a date"}\n      </p>\n      <dialog\n        role="dialog"\n        ref={dialogRef}\n        id={dialogId}\n        aria-modal\n        aria-labelledby={headerId}\n        onClose={() => setIsDialogOpen(false)}\n      >\n        <DayPicker\n          initialFocus\n          mode="single"\n          selected={selectedDate}\n          onSelect={handleSelect}\n        />\n      </dialog>\n    </div>\n  );\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1725:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>l});var a=t(2379);const i={},d=a.createContext(i);function l(e){const n=a.useContext(d);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);